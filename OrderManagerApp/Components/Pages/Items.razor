@page "/items"
@inject LiteDbService DBService
@inject NavigationManager NavManager

<h1 class="mb-3">@Localizer["Items"]</h1>

@if (!_items.Any()) {
    <div class="d-flex flex-grow-1 align-center justify-center mud-width-full">
        <MudText Typo="Typo.h6">@Localizer["ThereAreNoItems"]</MudText>
    </div>
}
else {
    <div class="d-flex flex-column gap-3 mb-16">
        @foreach (var item in _items) {
            <ItemCard @key="item.Id" Item="item" OnItemChanged="RefreshItems"/>
        }
    </div>
}
<div class="d-flex align-center justify-end mud-width-full fixed-fab">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
            OnClick="@(() => OpenItemDialog())"/>
</div>

@code {
    private List<Item> _items = new();

    protected override void OnInitialized() {
        RefreshItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var paramValue = GetQueryParam("open-dialog");
            if (paramValue == "true") {
                await OpenItemDialog();
            }
        }
    }

    private void RefreshItems() {
        _items = DBService.GetItems();
    }

    private async Task OpenItemDialog() {
        var parameter = new DialogParameters {
            ["Item"] = new Item(),
            ["OnItemChanged"] = EventCallback.Factory.Create(this, RefreshItems)
        };

        var options = new DialogOptions {
            BackdropClick = false,
            CloseOnEscapeKey = true,
            CloseButton = true,
            FullWidth = true,
            Position = DialogPosition.TopCenter
        };

        await DialogService.ShowAsync<ItemDialog>(Localizer["AddItem"], parameter, options);
    }

    string GetQueryParam(string paramName) {
        var uriBuilder = new UriBuilder(NavManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[paramName] ?? "";
    }
}
