@page "/orders"
@using System.Text
@inject LiteDbService DBService

<div class="d-flex justify-space-between">
    <h1>@Localizer["Orders"]</h1>
</div>

@if (!_orders.Any()) {
    <div class="d-flex flex-grow-1 align-center justify-center mud-width-full">
        <MudText Typo="Typo.h6">@Localizer["ThereAreNoOrders"]</MudText>
    </div>
}
else {
    <div class="d-flex flex-column gap-3 mb-16">
        @foreach (var order in _orders) {
            <OrderCard @key="order.Id" Order="order" OnOrderChange="RefreshOrders"/>
        }
    </div>
}

<div class="d-flex align-center justify-end mud-width-full fixed-fab">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
            OnClick="@(() => OpenOrderAddDialog())"/>
</div>

@code {
    private List<Order> _orders = new();

    protected override void OnInitialized() {
        RefreshOrders();
    }

    private void RefreshOrders() {
        _orders = DBService.GetOrders();
    }

    private async Task OpenOrderAddDialog() {
        await DialogService.ShowAsync<OrderDialog>(Localizer["AddOrder"], GetOrderDialogParameters(new Order()), GetOrderDialogOptions());
    }

    private DialogParameters GetOrderDialogParameters(Order order) {
        return new DialogParameters {
            ["Order"] = order ?? new Order(),
            ["OnOrderChanged"] = EventCallback.Factory.Create(this, RefreshOrders)
        };
    }

    private DialogOptions GetOrderDialogOptions() {
        return new DialogOptions {
            BackdropClick = false,
            FullScreen = true,
            CloseOnEscapeKey = true,
            CloseButton = true
        };
    }
}
