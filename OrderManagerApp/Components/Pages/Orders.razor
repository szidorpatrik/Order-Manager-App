@page "/orders"
@inject LiteDbService DBService

<div class="d-flex justify-space-between">
    <h1>@Localizer["Orders"]</h1>

    @if (_orders.Any())
    {
        <MudButton Variant="Variant.Text" EndIcon="@(_shouldExpandAll ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                   OnClick="ToggleExpandAll">
            @(Localizer[_shouldExpandAll ? "CollapseAll" : "ExpandAll"])
        </MudButton>
    }
</div>

@if (!_orders.Any())
{
    <div class="d-flex flex-grow-1 align-center justify-center mud-width-full">
        <MudText Typo="Typo.h6">@Localizer["ThereAreNoOrders"]</MudText>
    </div>
}
else
{
    <div class="d-flex flex-column gap-3 mb-16">
        @foreach (var order in _orders)
        {
            <MudPaper Class="pa-4">
                <MudStack Spacing="0">
                    <div class="d-flex justify-space-between align-center">
                        <MudText Typo="Typo.h6">@order</MudText>
                        <MudToggleIconButton Toggled="_expandedStates[order.Id]"
                                             ToggledChanged="@(() => ToggleExpand(order.Id))"
                                             Icon="@Icons.Material.Filled.ExpandMore"
                                             ToggledIcon="@Icons.Material.Filled.ExpandLess" />
                    </div>
                    <MudCollapse Expanded="_expandedStates[order.Id]">
                        <MudDivider Class="my-1" />

                        <MudText Typo="Typo.caption">@Localizer["CreatedAt", order.DateCreated.ToLocalTime().ToString("g")]</MudText>
                        <MudDivider Class="my-1" />

                        <MudText Typo="Typo.caption" Class="text-end">
                            <div>@Localizer["StartDate", order.DateStart.ToLocalTime().ToString("g")]</div>
                            <div>@Localizer["EndDate", order.DateEnd.ToLocalTime().ToString("g")]</div>
                        </MudText>
                        <MudDivider Class="my-1" />

                        @foreach (var orderItem in order.OrderItems)
                        {
                            <div>@orderItem</div>
                        }
                    </MudCollapse>
                </MudStack>
            </MudPaper>
        }
    </div>
}

<div class="d-flex align-center justify-end mud-width-full fixed-fab">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
            OnClick="@(() => OpenOrderAddDialog())" />
</div>

@code {
    private List<Order> _orders = new();
    private Dictionary<int, bool> _expandedStates = new();
    private bool _shouldExpandAll;

    protected override void OnInitialized()
    {
        RefreshOrders();
    }

    private void RefreshOrders()
    {
        _orders = DBService.GetOrders();
        foreach (var order in _orders)
        {
            if (!_expandedStates.ContainsKey(order.Id))
            {
                _expandedStates[order.Id] = false;
            }
        }
    }

    private async Task OpenOrderAddDialog()
    {
        var parameter = new DialogParameters
            {
                ["Order"] = new Order(),
                ["OnOrderChanged"] = EventCallback.Factory.Create(this, RefreshOrders)
            };

        var options = new DialogOptions
            {
                BackdropClick = false,
                FullScreen = true,
                CloseOnEscapeKey = true,
                CloseButton = true,
            };

        await DialogService.ShowAsync<OrderAddDialog>(Localizer["AddOrder"], parameter, options);
    }

    private void ToggleExpand(int id)
    {
        _expandedStates[id] = !_expandedStates[id];
        _shouldExpandAll = _expandedStates.Values.All(value => value);
    }

    private void ToggleExpandAll()
    {
        _shouldExpandAll = !_shouldExpandAll;
        foreach (var order in _orders)
        {
            if (_shouldExpandAll)
            {
                _expandedStates[order.Id] = true;
            }
            else
            {
                _expandedStates[order.Id] = false;
            }
        }
    }
}
