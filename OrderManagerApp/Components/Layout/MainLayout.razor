@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" DefaultScrollbar="true"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider class="mb-9"/>

<MudLayout>
    <MudMainContent Class="d-flex flex-column pt-0" Style="height: 100vh;">
        <div class="flex-grow-1 d-flex flex-column py-4" style="overflow: auto; width: 100%;">
            <MudContainer Class="flex-grow-1 d-flex flex-column px-3 gap-3">
                @Body
            </MudContainer>
        </div>
        <div class="d-flex flex-shrink-0 mud-theme-dark">
            <BottomNavBar/>
        </div>
    </MudMainContent>
</MudLayout>


@code {
    private          bool             _isDarkMode       = true;
    private          MudThemeProvider _mudThemeProvider = default!;
    private readonly AppTheme         _currentTheme     = Enum.Parse<AppTheme>(Preferences.Get("AppTheme", "0"));

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;

        if (_currentTheme == AppTheme.Unspecified) {
            // Get the system preference for light/dark mode
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
        }
        else {
            await _mudThemeProvider.SystemPreferenceChanged(_currentTheme == AppTheme.Dark);
        }
        StateHasChanged();
    }

    private Task OnSystemPreferenceChanged(bool newValue) {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
