<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddItem" xml:space="preserve">
    <value>Add new item</value>
  </data>
  <data name="AddOrder" xml:space="preserve">
    <value>Add new order</value>
  </data>
  <data name="AreYouSureToDelete" xml:space="preserve">
    <value>Are you sure about deleting {0}?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CollapseAll" xml:space="preserve">
    <value>Collapse all</value>
  </data>
  <data name="CreatedAt" xml:space="preserve">
    <value>Created at: {0}</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="DeleteItem" xml:space="preserve">
    <value>Delete item</value>
  </data>
  <data name="EditItem" xml:space="preserve">
    <value>Edit {0}</value>
  </data>
  <data name="ExpandAll" xml:space="preserve">
    <value>Expand all</value>
  </data>
  <data name="ItemAddedSuccessfully" xml:space="preserve">
    <value>{0} was added</value>
  </data>
  <data name="ItemDeletedSuccessfully" xml:space="preserve">
    <value>{0} was deleted</value>
  </data>
  <data name="ItemName" xml:space="preserve">
    <value>Item name</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="ItemUpdatedSuccessfully" xml:space="preserve">
    <value>{0} was updated</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OrderAlreadyExists" xml:space="preserve">
    <value>#{0} already exists</value>
  </data>
  <data name="OrderNumber" xml:space="preserve">
    <value>Order number</value>
  </data>
  <data name="Orders" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SomethingWentWrong" xml:space="preserve">
    <value>Something went wrong</value>
  </data>
  <data name="ThereAreNoItems" xml:space="preserve">
    <value>There are no items</value>
  </data>
  <data name="ThereAreNoOrders" xml:space="preserve">
    <value>There are no orders</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="SelectDateStart" xml:space="preserve">
    <value>Select start date</value>
  </data>
  <data name="SelectDateEnd" xml:space="preserve">
    <value>Select end date</value>
  </data>
  <data name="OrderMustBeGreaterThanZero" xml:space="preserve">
    <value>Order must be greater than 0</value>
  </data>
  <data name="StartDateOrTimeMissing" xml:space="preserve">
    <value>Start date or time is missing</value>
  </data>
  <data name="EndDateOrTimeMissing" xml:space="preserve">
    <value>End date or time is missing</value>
  </data>
  <data name="EndDateMustBeAfterStartDate" xml:space="preserve">
    <value>End date must be after start date</value>
  </data>
  <data name="SelectTimeStart" xml:space="preserve">
    <value>Select end time</value>
  </data>
  <data name="SelectTimeEnd" xml:space="preserve">
    <value>Select start time</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start date: {0}</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End date: {0}</value>
  </data>
  <data name="TimeStart" xml:space="preserve">
      <value>Start time</value>
  </data>
  <data name="TimeEnd" xml:space="preserve">
      <value>End time</value>
  </data>
  <data name="Duration" xml:space="preserve">
    <value>Duration: {0}</value>
  </data>
  <data name="UnitPrice" xml:space="preserve">
    <value>Unit price</value>
  </data>
  <data name="TotalPrice" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="PluralSuffix" xml:space="preserve">
    <value>s have</value>
  </data>
  <data name="SingularSuffix" xml:space="preserve">
    <value>has</value>
  </data>
  <data name="SelectedItemsMessage" xml:space="preserve">
    <value>{0} item{1} been selected</value>
  </data>
  <data name="DurationFormatDayHourMinutes" xml:space="preserve">
    <value>{0}d {1}h {2}m</value>
  </data>
  <data name="InvalidDuration" xml:space="preserve">
    <value>Invalid duration</value>
  </data>
  <data name="DurationFormatHourMinutes" xml:space="preserve">
    <value>{0}h {1}m</value>
  </data>
  <data name="OrderDeletedSuccessfully" xml:space="preserve">
    <value>Order #{0} was deleted</value>
  </data>
  <data name="OrderUpdatedSuccessfully" xml:space="preserve">
    <value>Order #{0} was updated</value>
  </data>
  <data name="EditOrder" xml:space="preserve">
    <value>Edit order {0}</value>
  </data>
  <data name="OrderCreatedSuccessfully" xml:space="preserve">
    <value>Order #{0} created</value>
  </data>
  <data name="DeleteOrder" xml:space="preserve">
    <value>Delete order</value>
  </data>
  <data name="AreYouSureToDeleteOrder" xml:space="preserve">
    <value>Are you sure about deleting order #{0}?</value>
  </data>
  <data name="OrderNumberIsRequired" xml:space="preserve">
    <value>Order number is required</value>
  </data>
  <data name="ItemNameIsRequired" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="ItemPriceIsRequired" xml:space="preserve">
    <value>Price is required</value>
  </data>
  <data name="ItemPriceMustBeGreaterOrEqualToZero" xml:space="preserve">
    <value>Price must be greater than or equal to 0</value>
  </data>
  <data name="ListIsEmptyClickHereToAddItem" xml:space="preserve">
    <value>List is empty click to add items</value>
  </data>
  <data name="TotalOrders" xml:space="preserve">
    <value>Total orders</value>
  </data>
  <data name="PendingOrders" xml:space="preserve">
    <value>Pending orders</value>
  </data>
  <data name="CanceledOrders" xml:space="preserve">
    <value>Canceled orders</value>
  </data>
  <data name="CompletedOrders" xml:space="preserve">
    <value>Completed orders</value>
  </data>
  <data name="CompletedDate" xml:space="preserve">
      <value>Completion date: {0}</value>
  </data>
  <data name="CanceledDate" xml:space="preserve">
    <value>Canceled at: {0}</value>
  </data>
  <data name="OrderMarkedAsCompleted" xml:space="preserve">
    <value>Order #{0} marked as completed</value>
  </data>
  <data name="MarkAsCompleted" xml:space="preserve">
      <value>Mark as completed</value>
  </data>
  <data name="Completed" xml:space="preserve">
      <value>Completed</value>
  </data>
  <data name="Canceled" xml:space="preserve">
      <value>Canceled</value>
  </data>
  <data name="Pending" xml:space="preserve">
      <value>Pending</value>
  </data>
  <data name="Status" xml:space="preserve">
      <value>Status</value>
  </data>
  <data name="DurationFormatMinutes" xml:space="preserve">
      <value>{0}m</value>
  </data>
  <data name="EndTimeMustBeAfterStartTime" xml:space="preserve">
      <value>End time must be after start time</value>
  </data>
  <data name="TotalRevenue" xml:space="preserve">
      <value>Total revenue</value>
  </data>
  <data name="NoComparisonAvailable" xml:space="preserve">
      <value>No comparison available</value>
  </data>
  <data name="RevenueUpBy" xml:space="preserve">
      <value>Revenue up by {0}%</value>
  </data>
  <data name="RevenueDownBy" xml:space="preserve">
      <value>Revenue down by {0}%</value>
  </data>
  <data name="RevenueSame" xml:space="preserve">
      <value>Same revenue</value>
  </data>
  <data name="PendingRevenue" xml:space="preserve">
      <value>Pending revenue</value>
  </data>
  <data name="TotalRevenueThisMonth" xml:space="preserve">
      <value>Total revenue this month</value>
  </data>
</root>